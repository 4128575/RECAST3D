{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"RECAST3D REConstruction of Arbitrary Slices in Tomography This visualization software for tomography, is built for use in a distributed, real-time live reconstruction pipeline. It uses TomoPackets as its protocol for requesting and receiving slice reconstructions, and other data. See also: TomoPackets SliceRecon Dependencies OpenGL (required) development libraries and headers glm (required) GLFW (submodule) Assimp (submodule) ImGui (submodule) ZeroMQ (submodule) cppzmq (submodule) Eigen (submodule) TomoPackets (submodule) Installation Build RECAST3D: After installing the dependencies, run: git submodule update --remote --init --recursive mkdir build cd build cmake .. make -j8 The RECAST3D binary can then be found in the build directory. Authors RECAST3D is developed by the Computational Imaging group at CWI. Main author: Jan-Willem Buurlage Also thanks to: Holger Kohr Willem Jan Palenstijn Contributing We welcome contributions. Please submit pull requests against the develop branch. If you have any issues, questions, or remarks, then please open an issue on GitHub. Please Cite Us If you have used RECAST3D for a scientific publication, we would appreciate citations to the following paper: Real-time quasi-3D tomographic reconstruction. JW Buurlage, H Kohr, WJ Palenstijn, KJ Batenburg. Measurement Science and Technology (2018) License This project is licensed under the GPL. See LICENSE.md for details. Acknowledgments Iosevka font . Copyright (c) 2015-2017 Belleve Invis (belleve@typeof.net).","title":"Home"},{"location":"#recast3d","text":"REConstruction of Arbitrary Slices in Tomography This visualization software for tomography, is built for use in a distributed, real-time live reconstruction pipeline. It uses TomoPackets as its protocol for requesting and receiving slice reconstructions, and other data. See also: TomoPackets SliceRecon","title":"RECAST3D"},{"location":"#dependencies","text":"OpenGL (required) development libraries and headers glm (required) GLFW (submodule) Assimp (submodule) ImGui (submodule) ZeroMQ (submodule) cppzmq (submodule) Eigen (submodule) TomoPackets (submodule)","title":"Dependencies"},{"location":"#installation","text":"","title":"Installation"},{"location":"#build-recast3d","text":"After installing the dependencies, run: git submodule update --remote --init --recursive mkdir build cd build cmake .. make -j8 The RECAST3D binary can then be found in the build directory.","title":"Build RECAST3D:"},{"location":"#authors","text":"RECAST3D is developed by the Computational Imaging group at CWI. Main author: Jan-Willem Buurlage Also thanks to: Holger Kohr Willem Jan Palenstijn","title":"Authors"},{"location":"#contributing","text":"We welcome contributions. Please submit pull requests against the develop branch. If you have any issues, questions, or remarks, then please open an issue on GitHub.","title":"Contributing"},{"location":"#please-cite-us","text":"If you have used RECAST3D for a scientific publication, we would appreciate citations to the following paper: Real-time quasi-3D tomographic reconstruction. JW Buurlage, H Kohr, WJ Palenstijn, KJ Batenburg. Measurement Science and Technology (2018)","title":"Please Cite Us"},{"location":"#license","text":"This project is licensed under the GPL. See LICENSE.md for details.","title":"License"},{"location":"#acknowledgments","text":"Iosevka font . Copyright (c) 2015-2017 Belleve Invis (belleve@typeof.net).","title":"Acknowledgments"},{"location":"changelog/","text":"Changelog 1.0.0-rc.1 - 2018-11-13 Added Add documentation Improved build scripts Use TomoPackets v1.0.0 Removed Disable 2D scenes Disable movie scenes Disable dataset loading 0.1.0 - 2018-06-21 Initial release.","title":"Release Notes"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#100-rc1-2018-11-13","text":"","title":"1.0.0-rc.1 - 2018-11-13"},{"location":"changelog/#added","text":"Add documentation Improved build scripts Use TomoPackets v1.0.0","title":"Added"},{"location":"changelog/#removed","text":"Disable 2D scenes Disable movie scenes Disable dataset loading","title":"Removed"},{"location":"changelog/#010-2018-06-21","text":"Initial release.","title":"0.1.0 - 2018-06-21"},{"location":"live_software_stack/","text":"Installing the CI CWI live reconstruction software stack For realizing live reconstruction of tomographic scans, the CI CWI group develops a set of libraries and software that can work together. The main software are: RECAST3D . The visualization software. This typically runs at a workstation, and is controlled by a user looking at live reconstructions of arbitrarily oriented slices. SliceRecon . The reconstruction software library. This runs on a computer with a GPU (it can be the same as the workstation running RECAST3D). It receives the projection data, and performs slice reconstructions. TomoPackets . The glue between the different components. This library defines a protocol for sending messages between scanners, reconstruction nodes, and visualization workstations. Depending on the data source, an adapter is needed that converts the acquisition metadata and projection data into a common format defined by TomoPackets, and that can be sent as input to SliceRecon. Further reading: TomoPackets#Pipeline for an overview of the pipeline. TomoPackets#Usage for documentation on writing an adapter. Detailed installation instructions For convenience, we will describe in detail how to install all the different components of the live reconstruction software stack. Warning If you have trouble following this guide, please first see the documentation of each individual package for the most up-to-date installation instructions. If that still does not help, please let us know !. 0. (optional) Setting up a fresh Conda or VirtualEnv environment Although it is not strictly necessary to use any Python component, it is by far the easiest way to extend and customize the software. We would suggest making a new environment in which the Python bindings to our libraries are installed. For example: conda create -n live python = 3 .6 conda activate live # ... or `source activate live` for old conda versions if you choose to do this, make and activate the environment before following the rest of these instructions. 1. Installing RECAST3D First, we will install the RECAST3D visualization software. # make a directory to store the packages mkdir projects/live_reconstruction cd projects/live_reconstruction # clone the repository git clone https://github.com/cicwi/RECAST3D.git/ cd RECAST3D Next, make sure you have GLM and the OpenGL development headers and libraries installed. On Fedora, this would require the glm-devel and for example mesa-libGL-devel packages. Optionally, preinstall the submodule dependencies to speed up the build. If our build script cannot find these dependencies, it will build them from source. To build RECAST3D, run e.g.: git submodule update --remote --init --recursive mkdir build cd build cmake .. make -j8 Finally, test if you can run RECAST3D: ./recast3d if you run into any issues, please let us know ! 2. Installing SliceRecon Next, we install SliceRecon. # go back to the root directory: cd projects/live_reconstruction # clone the repository git clone https://github.com/cicwi/SliceRecon.git/ cd SliceRecon Next, we need to install the dependencies. Warning The software requires a development version of the ASTRA toolbox, available from the ASTRA repository on github . The required functionality will be released in ASTRA v1.9. First, we have to install the ASTRA toolbox . We need ASTRA with CUDA support, and install it in such a way so that pkg-config is able to find the library. See the ASTRA documentation for details on installing ASTRA as a C++ library. Note On CI CWI workstations, you can use the module system: module load libastra/git . Again, preinstalling the submodule dependencies will speed up the build. git submodule update --remote --init --recursive mkdir build cd build cmake .. make -j8 Installing the SliceRecon Python bindings Next, we install the Python bindings. cd ../python/ # relative to the build directory pip install -e . Testing the installation To test if the SliceRecon software is installed correctly, try the following steps. Start up a RECAST3D instance . Change directories to the build folder of the RECAST3D directory we made before, and run: ./recast3d Start up a SliceRecon server , that connects to RECAST3D and listens for incoming (projection) data. Change directories to the build folder of the SliceRecon repository, and run: ./example/slicerecon_server --slice-size 512 --preview-size 256 Switching windows to the RECAST3D software, you should see a new scene with black slices. Pushing data into SliceRecon . The server is unable to reconstruct anything interesting, because it has received no data yet. To push some example data into SliceRecon, run the following (from the same folder as before): ./example/slicerecon_push_tomos --parallel This will send very poor quality and low-resolution projection data of a Shepp\u2013Logan phantom to the server, but you should be able to see some reconstructions in the RECAST3D software. 3. (optional) Installing TomoPackets When developing your own data adapter (or using an existing one), it is easiest to use the Python bindings to the TomoPackets communication library. To install it into your Python environment, run the following: # go back to the root directory: cd projects/live_reconstruction # clone the repository git clone https://github.com/cicwi/TomoPackets.git/ cd TomoPackets To install the library, simply run: git submodule update --init --remote pip install -e . You can now develop and run TomoPackets data adapters.","title":"Installing"},{"location":"live_software_stack/#installing-the-ci-cwi-live-reconstruction-software-stack","text":"For realizing live reconstruction of tomographic scans, the CI CWI group develops a set of libraries and software that can work together. The main software are: RECAST3D . The visualization software. This typically runs at a workstation, and is controlled by a user looking at live reconstructions of arbitrarily oriented slices. SliceRecon . The reconstruction software library. This runs on a computer with a GPU (it can be the same as the workstation running RECAST3D). It receives the projection data, and performs slice reconstructions. TomoPackets . The glue between the different components. This library defines a protocol for sending messages between scanners, reconstruction nodes, and visualization workstations. Depending on the data source, an adapter is needed that converts the acquisition metadata and projection data into a common format defined by TomoPackets, and that can be sent as input to SliceRecon. Further reading: TomoPackets#Pipeline for an overview of the pipeline. TomoPackets#Usage for documentation on writing an adapter.","title":"Installing the CI CWI live reconstruction software stack"},{"location":"live_software_stack/#detailed-installation-instructions","text":"For convenience, we will describe in detail how to install all the different components of the live reconstruction software stack. Warning If you have trouble following this guide, please first see the documentation of each individual package for the most up-to-date installation instructions. If that still does not help, please let us know !.","title":"Detailed installation instructions"},{"location":"live_software_stack/#0-optional-setting-up-a-fresh-conda-or-virtualenv-environment","text":"Although it is not strictly necessary to use any Python component, it is by far the easiest way to extend and customize the software. We would suggest making a new environment in which the Python bindings to our libraries are installed. For example: conda create -n live python = 3 .6 conda activate live # ... or `source activate live` for old conda versions if you choose to do this, make and activate the environment before following the rest of these instructions.","title":"0. (optional) Setting up a fresh Conda or VirtualEnv environment"},{"location":"live_software_stack/#1-installing-recast3d","text":"First, we will install the RECAST3D visualization software. # make a directory to store the packages mkdir projects/live_reconstruction cd projects/live_reconstruction # clone the repository git clone https://github.com/cicwi/RECAST3D.git/ cd RECAST3D Next, make sure you have GLM and the OpenGL development headers and libraries installed. On Fedora, this would require the glm-devel and for example mesa-libGL-devel packages. Optionally, preinstall the submodule dependencies to speed up the build. If our build script cannot find these dependencies, it will build them from source. To build RECAST3D, run e.g.: git submodule update --remote --init --recursive mkdir build cd build cmake .. make -j8 Finally, test if you can run RECAST3D: ./recast3d if you run into any issues, please let us know !","title":"1. Installing RECAST3D"},{"location":"live_software_stack/#2-installing-slicerecon","text":"Next, we install SliceRecon. # go back to the root directory: cd projects/live_reconstruction # clone the repository git clone https://github.com/cicwi/SliceRecon.git/ cd SliceRecon Next, we need to install the dependencies. Warning The software requires a development version of the ASTRA toolbox, available from the ASTRA repository on github . The required functionality will be released in ASTRA v1.9. First, we have to install the ASTRA toolbox . We need ASTRA with CUDA support, and install it in such a way so that pkg-config is able to find the library. See the ASTRA documentation for details on installing ASTRA as a C++ library. Note On CI CWI workstations, you can use the module system: module load libastra/git . Again, preinstalling the submodule dependencies will speed up the build. git submodule update --remote --init --recursive mkdir build cd build cmake .. make -j8","title":"2. Installing SliceRecon"},{"location":"live_software_stack/#installing-the-slicerecon-python-bindings","text":"Next, we install the Python bindings. cd ../python/ # relative to the build directory pip install -e .","title":"Installing the SliceRecon Python bindings"},{"location":"live_software_stack/#testing-the-installation","text":"To test if the SliceRecon software is installed correctly, try the following steps. Start up a RECAST3D instance . Change directories to the build folder of the RECAST3D directory we made before, and run: ./recast3d Start up a SliceRecon server , that connects to RECAST3D and listens for incoming (projection) data. Change directories to the build folder of the SliceRecon repository, and run: ./example/slicerecon_server --slice-size 512 --preview-size 256 Switching windows to the RECAST3D software, you should see a new scene with black slices. Pushing data into SliceRecon . The server is unable to reconstruct anything interesting, because it has received no data yet. To push some example data into SliceRecon, run the following (from the same folder as before): ./example/slicerecon_push_tomos --parallel This will send very poor quality and low-resolution projection data of a Shepp\u2013Logan phantom to the server, but you should be able to see some reconstructions in the RECAST3D software.","title":"Testing the installation"},{"location":"live_software_stack/#3-optional-installing-tomopackets","text":"When developing your own data adapter (or using an existing one), it is easiest to use the Python bindings to the TomoPackets communication library. To install it into your Python environment, run the following: # go back to the root directory: cd projects/live_reconstruction # clone the repository git clone https://github.com/cicwi/TomoPackets.git/ cd TomoPackets To install the library, simply run: git submodule update --init --remote pip install -e . You can now develop and run TomoPackets data adapters.","title":"3. (optional) Installing TomoPackets"},{"location":"user_guide/","text":"RECAST3D User Guide Here we discuss the user interface of RECAST3D. We assume that there is a scene active, and that there is an active reconstruction server with non-zero projection data. Menu bar In the Scenes tab of the menu bar, all the current scenes are listed. Additional scenes can be added, or scenes can be deleted from this tab. Scene controls On the left, there is a window with controls for the scene. Color scheme A color scheme can be chosen with a picker interface. Fixed camera angles You can set the camera in the scene to fixed angles, for example by focusing on one of the three standard orthoslices. You can always reset the camera to the default position using the spacebar. Axes You can toggle the visibility of the axes indicator. In the axis indicator; red , green , and blue represent the x x , y y , and z z axis respectively. Contrast You can change the contrast in the scene using the min/max sliders at the bottom of the window. It also shows a histogram of the reconstruction data. Camera and slice controls Zooming You can zoom in, and out, using the scroll wheel on your mouse. Rotating the camera Rotating the camera around the object can be done by pressing the left mouse button while not hovering over a slice, and dragging the mouse. Changing a slice You can translate a slice by pressing the left mouse button while hovering over a slice, and dragging the mouse. This will translate the slice along its normal. Changing the orientation of a slice You can rotate a slice around one of its edges, by pressing the right mouse button while hovering over a slice. It will rotate around the furthest edge from where you click.","title":"User Guide"},{"location":"user_guide/#recast3d-user-guide","text":"Here we discuss the user interface of RECAST3D. We assume that there is a scene active, and that there is an active reconstruction server with non-zero projection data.","title":"RECAST3D User Guide"},{"location":"user_guide/#menu-bar","text":"In the Scenes tab of the menu bar, all the current scenes are listed. Additional scenes can be added, or scenes can be deleted from this tab.","title":"Menu bar"},{"location":"user_guide/#scene-controls","text":"On the left, there is a window with controls for the scene.","title":"Scene controls"},{"location":"user_guide/#color-scheme","text":"A color scheme can be chosen with a picker interface.","title":"Color scheme"},{"location":"user_guide/#fixed-camera-angles","text":"You can set the camera in the scene to fixed angles, for example by focusing on one of the three standard orthoslices. You can always reset the camera to the default position using the spacebar.","title":"Fixed camera angles"},{"location":"user_guide/#axes","text":"You can toggle the visibility of the axes indicator. In the axis indicator; red , green , and blue represent the x x , y y , and z z axis respectively.","title":"Axes"},{"location":"user_guide/#contrast","text":"You can change the contrast in the scene using the min/max sliders at the bottom of the window. It also shows a histogram of the reconstruction data.","title":"Contrast"},{"location":"user_guide/#camera-and-slice-controls","text":"","title":"Camera and slice controls"},{"location":"user_guide/#zooming","text":"You can zoom in, and out, using the scroll wheel on your mouse.","title":"Zooming"},{"location":"user_guide/#rotating-the-camera","text":"Rotating the camera around the object can be done by pressing the left mouse button while not hovering over a slice, and dragging the mouse.","title":"Rotating the camera"},{"location":"user_guide/#changing-a-slice","text":"You can translate a slice by pressing the left mouse button while hovering over a slice, and dragging the mouse. This will translate the slice along its normal.","title":"Changing a slice"},{"location":"user_guide/#changing-the-orientation-of-a-slice","text":"You can rotate a slice around one of its edges, by pressing the right mouse button while hovering over a slice. It will rotate around the furthest edge from where you click.","title":"Changing the orientation of a slice"}]}